#include <linux/kernel.h>
#include <linux/slab.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/usb/input.h>
#include <linux/hid.h>
 
#include <linux/input.h>
 
 
/* 定义一个描述USB的结构体 */
struct yl_usbmouse {
	dma_addr_t usb_buf_phys;	/* 描述分配的缓冲区的物理地址 */
	char *usb_buf_virt;		/* 描述分配的缓冲区的虚拟地址 */
	int usb_buf_len;		/* 用来描述缓冲区的大小 */
	struct urb *urb;		/* 描述usb的请求块 */
	struct input_dev *input_dev;	/* 定义一个用来描述输入事件的结构体 */
};
 
/* 定义一个描述USB结构体的变量 */
static struct yl_usbmouse g_yl_usbmouse;
 
/* usb鼠标的中断处理函数 */
static void yl_usbmouse_irq(struct urb *urb)
{
	/*	KEY_L		-----  	MOUSE_LEFT
	 * 	KEY_S		-----	MOUSE_RIGHT
	 *	KEY_ENTER	-----	MOUSE_MIDDLE
	 */
	input_event(g_yl_usbmouse.input_dev, EV_KEY, KEY_L, g_yl_usbmouse.usb_buf_virt[1] & 0x01);
	input_event(g_yl_usbmouse.input_dev, EV_KEY, KEY_S, g_yl_usbmouse.usb_buf_virt[1] & 0x02);
	input_event(g_yl_usbmouse.input_dev, EV_KEY, KEY_ENTER, g_yl_usbmouse.usb_buf_virt[1] & 0x04);
	input_sync(g_yl_usbmouse.input_dev);
 
	/* 再次提交urb */
	usb_submit_urb(g_yl_usbmouse.urb, GFP_ATOMIC);
}
 
/* 匹配设备成功时调用的探测函数 */
static int yl_usb_mouse_probe(struct usb_interface *intf, const struct usb_device_id *id)
{
	struct usb_device *dev = interface_to_usbdev(intf);
	struct usb_host_interface *interface;
	struct usb_endpoint_descriptor *endpoint;
	int pipe;
 
	/* 获取接口和端点信息 */
	interface = intf->cur_altsetting;
	endpoint = &interface->endpoint[0].desc;
 
	/* 获取USB设备的某个端点 */
	pipe = usb_rcvintpipe(dev, endpoint->bEndpointAddress);
 
	/* 获取传输的数据的长度 */
	g_yl_usbmouse.usb_buf_len = endpoint->wMaxPacketSize;
 
	/* 分配一块缓冲区用来存放usb鼠标的数据 */
	g_yl_usbmouse.usb_buf_virt = usb_alloc_coherent(dev, g_yl_usbmouse.usb_buf_len, GFP_ATOMIC, &g_yl_usbmouse.usb_buf_phys);
 
	/* 1、分配一个usb请求块 */
	g_yl_usbmouse.urb = usb_alloc_urb(0, GFP_KERNEL);
 
	/* 2、初始化这个usb请求块 */
	usb_fill_int_urb(g_yl_usbmouse.urb, dev, pipe, g_yl_usbmouse.usb_buf_virt, g_yl_usbmouse.usb_buf_len, yl_usbmouse_irq, NULL, endpoint->bInterval);
	g_yl_usbmouse.urb->transfer_dma = g_yl_usbmouse.usb_buf_phys;
	g_yl_usbmouse.urb->transfer_flags |= URB_NO_TRANSFER_DMA_MAP;
 
	/* 3、提交这个usb请求块 */
	usb_submit_urb(g_yl_usbmouse.urb, GFP_KERNEL); 	
 
	/* 4、和输入事件相关的操作 */
	/* 4.1 分配一个input_dev的结构体的变量 */
	g_yl_usbmouse.input_dev = input_allocate_device();
 
	/* 4.2 设置这个input_dev结构体 */
	/* 4.2.1 确定能产生哪类事件 */
	set_bit(EV_KEY, g_yl_usbmouse.input_dev->evbit);	// 按键类事件
	set_bit(EV_REP, g_yl_usbmouse.input_dev->evbit);	// 重复类事件
 
	/* 4.2.2 确定能产生该类事件中的哪些事件 */
	set_bit(KEY_L, g_yl_usbmouse.input_dev->keybit);
	set_bit(KEY_S, g_yl_usbmouse.input_dev->keybit);
	set_bit(KEY_ENTER, g_yl_usbmouse.input_dev->keybit);
 
	/* 4.3 注册这个input_dev结构体的变量 */
	input_register_device(g_yl_usbmouse.input_dev);
 
	return 0;
}
 
/* usb设备拔除时调用的函数 */
static void yl_usb_mouse_disconnect(struct usb_interface *intf)
{
	struct usb_device *dev = interface_to_usbdev(intf);
 
	input_unregister_device(g_yl_usbmouse.input_dev);
	input_free_device(g_yl_usbmouse.input_dev);
 
	usb_kill_urb(g_yl_usbmouse.urb);
	usb_free_urb(g_yl_usbmouse.urb);
 
	usb_free_coherent(dev, g_yl_usbmouse.usb_buf_len, g_yl_usbmouse.usb_buf_virt, g_yl_usbmouse.usb_buf_phys);
}
 
 
/* 定义一个id_table的数组，当usb设备插入时进行比较和判断 */
static struct usb_device_id yl_usb_mouse_id_table [] = {
	{ USB_INTERFACE_INFO(USB_INTERFACE_CLASS_HID, USB_INTERFACE_SUBCLASS_BOOT,
		USB_INTERFACE_PROTOCOL_MOUSE) },
	{ }	/* Terminating entry */
};
 
/* 定义一个usb_driver的结构体变量 */
static struct usb_driver yl_usb_mouse_driver = {
	.name		= "yl_usbmouse",
	.probe		= yl_usb_mouse_probe,
	.disconnect	= yl_usb_mouse_disconnect,
	.id_table	= yl_usb_mouse_id_table,
};
 
/* 模块的入口函数 */
static int __init yl_usb_mouse_init(void)
{	
	/* 注册一个usb_driver的结构体变量 */
	usb_register(&yl_usb_mouse_driver);
	return 0;
}
 
/* 模块的出口函数 */
static void __exit yl_usb_mouse_exit(void)
{	
	/* 注销一个usb_driver的结构体变量 */
	usb_deregister(&yl_usb_mouse_driver);
}
 
module_init(yl_usb_mouse_init);
module_exit(yl_usb_mouse_exit);
 
MODULE_LICENSE("GPL");
